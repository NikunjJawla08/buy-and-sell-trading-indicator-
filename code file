import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
import yfinance as yf
import matplotlib.pyplot as plt
from talib import MACD

# Load historical stock price data
data = yf.download('AAPL', start='2020-01-01', end='2022-01-01')

# Calculate MACD
macd, signal, _ = MACD(data['Close'], fastperiod=12, slowperiod=26, signalperiod=9)

# Create DataFrame to store MACD data
macd_df = pd.DataFrame({'MACD': macd, 'Signal': signal}, index=data.index)

# Preprocess the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1,1))

# Create sequences for LSTM
def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:(i + seq_length)])
        y.append(data[i + seq_length])
    return np.array(X), np.array(y)

# Define sequence length
sequence_length = 10

# Create sequences for training
X, y = create_sequences(scaled_data, sequence_length)

# Split data into training and testing sets
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Build LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1, activation='sigmoid'))  # Output layer with sigmoid activation for probability

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=32)

# Make predictions
probabilities = model.predict(X_test)

# Define thresholds for buy and sell signals
buy_threshold = 0.6
sell_threshold = 0.4

# Convert probabilities to buy and sell signals
buy_signal = probabilities > buy_threshold
sell_signal = probabilities < sell_threshold

# Add MACD data to original DataFrame
data = pd.concat([data, macd_df], axis=1)

# Visualize probabilities, MACD, and buy/sell signals
plt.figure(figsize=(12, 6))
plt.plot(data['Close'].values[split+sequence_length:], label='Actual Prices')
plt.plot(probabilities, label='Buy/Sell Probability')

# Plot buy and sell signals
plt.plot(data['Close'][split+sequence_length:].loc[buy_signal], '^', markersize=10, color='g', lw=0, label='Buy Signal')
plt.plot(data['Close'][split+sequence_length:].loc[sell_signal], 'v', markersize=10, color='r', lw=0, label='Sell Signal')

plt.legend()
plt.show()
